<?php

declare(strict_types=1);

namespace Tests\SearchService;

use App\Http\Requests\SearchRequest;
use Faker\Factory;
use Tests\TestCase;
use Validator;

final class SearchRequestTest extends TestCase
{
    /**
     * @var array $rules
     */
    private array $rules;

    /**
     * @var bool $isInit
     */
    private bool $isInit = true;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if ($this->isInit) {
            $this->isInit = false;
            $this->rules = (new SearchRequest())->rules();
        }
    }

    /**
     * Проверка ошибок валидации.
     *
     * @test
     *
     * @dataProvider validationFailsProvider
     *
     * @param array $input
     */
    public function testValidationFails(array $input): void
    {
        /** @var \Illuminate\Validation\Validator $v */
        $v = Validator::make($input, $this->rules);

        $this->assertTrue($v->fails());
        $this->assertEquals(1, $v->errors()->count());
    }

    /**
     * @return array
     */
    public function validationFailsProvider(): array
    {
        $faker = Factory::create( 'ru_RU');
        return [
            [
                'data' => [
                ],
            ],
            [
                'data' => [
                    'first_name' => "!$faker->firstName",
                    'last_name' => $faker->lastName,
                    'email' => $faker->email,
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => "!$faker->lastName",
                    'email' => $faker->email,
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => "a",
                    'last_name' => $faker->lastName,
                    'email' => $faker->email,
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => "a",
                    'email' => $faker->email,
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",
                    'last_name' => $faker->lastName,
                    'email' => $faker->email,
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => "qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm",
                    'email' => $faker->email,
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => $faker->lastName,
                    'email' => $faker->name,
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => $faker->lastName,
                    'email' => "a@a.a",
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => $faker->lastName,
                    'email' => "qwertyuiopasdfghjklzxcvbnm.qwertyuiopasdfghjklzxcvbnm.qwertyuiopasdfghjklzxcvbnm@qwertyuiopasdfghjklzxcvbnm.qwertyuiopasdfghjklzxcvbnm",
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => $faker->lastName,
                    'email' => $faker->email,
                    'phone' => $faker->numberBetween(1, 999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => $faker->lastName,
                    'email' => $faker->email,
                    'phone' => "+{$faker->numberBetween(1000000, 9999999999999999)}",
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => $faker->lastName,
                    'email' => $faker->email,
                    'phone' => "999999999999999999999999999999991",
                ],
            ],
        ];
    }

    /**
     * Проверка валидации.
     *
     * @test
     *
     * @dataProvider validationProvider
     *
     * @param array $input
     */
    public function testValidation(array $input): void
    {
        /** @var \Illuminate\Validation\Validator $v */
        $v = Validator::make($input, $this->rules);

        $this->assertFalse($v->fails());
    }

    /**
     * @return array
     */
    public function validationProvider(): array
    {
        $faker = Factory::create( 'ru_RU');

        return [
            [
                'data' => [
                    'first_name' => $faker->firstName,
                    'last_name' => $faker->lastName,
                    'email' => $faker->email,
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => $faker->firstName,
                ],
            ],
            [
                'data' => [
                    'last_name' => $faker->lastName,
                ],
            ],
            [
                'data' => [
                    'email' => $faker->email,
                ],
            ],
            [
                'data' => [
                    'phone' => $faker->numberBetween(1000000, 9999999999999999),
                ],
            ],
            [
                'data' => [
                    'first_name' => "Ле",
                    'last_name' => "Яр",
                    'emails' => [
                        "т@я.рф",
                    ],
                    'phones' => [
                        "1000000",
                    ],
                ],
            ],
            [
                'data' => [
                    'first_name' => "ячсмитьбюфывапролджэйцукенгшщзхъ",
                    'last_name' => "ячсмитьбюфывапролджэйцукенгшщзхъ",
                    'emails' => [
                        "митьбюфывапролджэйцукенгшщзхъ.ячсмитьбюфывапролджэйцукенгшщзхъ@ячсмитьбюфывапролджэйцукенгшщзхъ.ячсмитьбюфывапролджэйцукенгшщзхъ",
                    ],
                    'phones' => [
                        "99999999999999999999999999999999",
                    ],
                ],
            ],
        ];
    }
}
