<?php

declare(strict_types=1);

namespace Tests\SearchService;

use App\Models\Client;
use App\Services\ClientService\ClientService;
use App\Services\ClientService\Models\ClientServiceDto;
use App\Services\ClientService\Models\ClientServiceEmailsDto;
use App\Services\ClientService\Models\ClientServicePhonesDto;
use App\Services\SearchService\Models\SearchServiceDto;
use App\Services\SearchService\SearchService;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

final class SearchServiceTest extends TestCase
{
    use DatabaseTransactions;

    /**
     * @var ClientService $clientService
     */
    private ClientService $clientService;

    /**
     * @var SearchService $searchService
     */
    private SearchService $searchService;

    /**
     * @var array $input
     */
    private array $input;

    /**
     * @var bool $isInit
     */
    private bool $isInit = true;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if ($this->isInit) {
            $this->searchService = new SearchService();
            $this->clientService = new ClientService();
            $this->isInit = false;
        }
    }

    /**
     * @test
     */
    public function testNotFound(): void
    {
        $input = $this->generateInputData();

        $collection = $this->searchService->run(new SearchServiceDto($input['first_name'], $input['last_name'], null, null));
        $this->assertEquals(0, $collection->count());
    }

    /**
     * * @test
     *
     * @dataProvider searchDataProvider
     *
     * @param array $input
     * @param array $search
     */
    public function testSearchData(array $input, array $search): void
    {
        Client::query()->where([
            'first_name' => $input['first_name'],
            'last_name' => $input['last_name']
        ])->exists();

        $dtoCreate = new ClientServiceDto(
            $input['first_name'],
            $input['last_name'],
            new ClientServiceEmailsDto($input['emails']),
            new ClientServicePhonesDto($input['phones'])
        );

        $this->clientService->create($dtoCreate);
        $this->clientService->create($dtoCreate);

        $searchService = new SearchService();
        $collection = $searchService->run(new SearchServiceDto($search['first_name'], $search['last_name'], $search['email'], (string) $search['phone']));
        $this->assertEquals(2, $collection->count());

        $collection->each(function ($client) use ($dtoCreate) {
            $this->assertEquals($client, $dtoCreate->toArray());
        });
    }

    /**
     * @return array
     */
    public function searchDataProvider(): array
    {
        $firstNameData = $this->fakerInputData();
        $lastNameData = $this->fakerInputData();
        $emailsData = $this->fakerInputData();
        $phonesData = $this->fakerInputData();
        $allData = $this->fakerInputData();

        return [
            [
                $firstNameData,
                [
                    'first_name' => $firstNameData['first_name'],
                    'last_name' => null,
                    'email' => null,
                    'phone' => null,
                ]
            ],
            [
                $lastNameData,
                [
                    'first_name' => null,
                    'last_name' => $lastNameData['last_name'],
                    'email' => null,
                    'phone' => null,
                ]
            ],
            [
                $emailsData,
                [
                    'first_name' => null,
                    'last_name' => null,
                    'email' => $emailsData['emails'][0],
                    'phone' => null,
                ]
            ],
            [
                $phonesData,
                [
                    'first_name' => null,
                    'last_name' => null,
                    'email' => null,
                    'phone' => $phonesData['phones'][0],
                ]
            ],
            [
                $allData,
                [
                    'first_name' => $allData['first_name'],
                    'last_name' => $allData['last_name'],
                    'email' => $allData['emails'][0],
                    'phone' => $allData['phones'][0],
                ]
            ],
        ];
    }

    /**
     * Проверка сущестования пользователя.
     *
     * @param array $input
     *
     * @return bool
     */
    private function checkClientExist(array $input): bool
    {
        return Client::query()->where([
            'first_name' => $input['first_name'],
            'last_name' => $input['last_name']
        ])->exists();
    }

    /**
     * Генератор тестовых данных клиента.
     *
     * @return array
     */
    private function generateInputData(): array
    {
        do {
            $input = $this->fakerInputData();
            $isNotUniq = $this->checkClientExist($input);
        } while ($isNotUniq);

        return $input;
    }

    /**
     * Тестовые данные.
     *
     * @return array
     */
    private function fakerInputData(): array
    {
        $faker = Factory::create( 'ru_RU');

        $i = $faker->numberBetween(1, 4);
        $emails = [];
        $phones = [];

        do {
            $emails[] = $faker->email;
            $phones[] = $faker->numberBetween(1000000, 9999999999999999);
            $i--;
        } while ($i > 0);

        return [
            'first_name' => "{$faker->firstName}_test",
            'last_name' => "{$faker->lastName}_test",
            'emails' => $emails,
            'phones' => $phones,
        ];
    }
}
