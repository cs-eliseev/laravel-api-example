<?php

declare(strict_types=1);

namespace Tests\ClientService;

use App\Models\Client;
use App\Models\Email;
use App\Models\Phone;
use App\Services\ClientService\ClientService;
use App\Services\ClientService\Models\ClientServiceDto;
use App\Services\ClientService\Models\ClientServiceEmailsDto;
use App\Services\ClientService\Models\ClientServicePhonesDto;
use Faker\Factory;
use Faker\Generator;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

final class ClientServiceTest extends TestCase
{
    use DatabaseTransactions;

    /**
     * @var Generator $faker
     */
    private Generator $faker;

    /**
     * @var ClientService $clientService
     */
    private ClientService $clientService;

    /**
     * @var array $input
     */
    private array $input;

    /**
     * @var bool $isInit
     */
    private bool $isInit = true;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if ($this->isInit) {
            $this->clientService = new ClientService();
            $this->faker = Factory::create( 'ru_RU');
            $this->isInit = false;
        }

        $this->input = $this->generateInputData();
    }

    /**
     * @test
     */
    public function testCreateClientNonEmail(): void
    {
        $dto = new ClientServiceDto(
            $this->input['first_name'],
            $this->input['last_name'],
            new ClientServiceEmailsDto(null),
            new ClientServicePhonesDto($this->input['phones'])
        );

        $client = $this->clientService->create($dto);
        $this->assertFalse($client->emails()->exists());
    }

    /**
     * @test
     */
    public function testCreateClientNonPhone(): void
    {
        $dto = new ClientServiceDto(
            $this->input['first_name'],
            $this->input['last_name'],
            new ClientServiceEmailsDto($this->input['emails']),
            new ClientServicePhonesDto(null)
        );

        $client = $this->clientService->create($dto);
        $this->assertFalse($client->phones()->exists());
    }

    /**
     * @test
     */
    public function testClientCRUD(): void
    {
        $dtoCreate = new ClientServiceDto(
            $this->input['first_name'],
            $this->input['last_name'],
            new ClientServiceEmailsDto($this->input['emails']),
            new ClientServicePhonesDto($this->input['phones'])
        );

        $client = $this->clientService->create($dtoCreate);
        $this->assertEquals($this->input['emails'], $dtoCreate->getEmails());
        $this->assertEquals($this->input['phones'], $dtoCreate->getPhones());
        $this->assertEquals(count($this->input['emails']), $client->emails()->count());
        $this->assertEquals(count($this->input['phones']), $client->phones()->count());
        $this->assertTrue($this->checkClientExist($this->input));

        $id = $client->id;

        $dtoRead = $this->clientService->read($client);
        $this->assertEquals($dtoCreate->toArray(), $dtoRead->toArray());

        $this->input = $this->generateInputData();
        $dtoUpdate = new ClientServiceDto(
            $this->input['first_name'],
            $this->input['last_name'],
            new ClientServiceEmailsDto($this->input['emails']),
            new ClientServicePhonesDto($this->input['phones'])
        );

        $this->clientService->update($client, $dtoUpdate);
        $this->assertEquals($this->input['emails'], $dtoUpdate->getEmails());
        $this->assertEquals($this->input['phones'], $dtoUpdate->getPhones());
        $this->assertEquals(count($this->input['emails']), $client->emails()->count());
        $this->assertEquals(count($this->input['phones']), $client->phones()->count());
        $this->assertTrue($this->checkClientExist($this->input));
        $this->assertFalse(Email::query()->onlyTrashed()->where('client_id', $id)->exists());
        $this->assertFalse(Phone::query()->onlyTrashed()->where('client_id', $id)->exists());

        $dtoRead = $this->clientService->read($client);
        $this->assertNotEquals($dtoCreate->toArray(), $dtoRead->toArray());
        $this->assertEquals($dtoUpdate->toArray(), $dtoRead->toArray());

        $this->clientService->delete($client);
        $this->assertFalse($this->checkClientExist($this->input));
        $this->assertFalse(Email::query()->where('client_id', $id)->exists());
        $this->assertFalse(Phone::query()->where('client_id', $id)->exists());

        $this->assertTrue(Client::query()->onlyTrashed()->where('id', $id)->exists());
        $this->assertEquals(count($this->input['emails']), Email::query()->onlyTrashed()->where('client_id', $id)->count());
        $this->assertEquals(count($this->input['phones']), Phone::query()->onlyTrashed()->where('client_id', $id)->count());
    }

    /**
     * Проверка сущестования пользователя.
     *
     * @param array $input
     *
     * @return bool
     */
    private function checkClientExist(array $input): bool
    {
        return Client::query()->where([
            'first_name' => $input['first_name'],
            'last_name' => $input['last_name']
        ])->exists();
    }

    /**
     * Генератор тестовых данных клиента.
     *
     * @return array
     */
    private function generateInputData(): array
    {
        do {
            $input = $this->fakerInputData();
            $isNotUniq = $this->checkClientExist($input);
        } while ($isNotUniq);

        return $input;
    }

    /**
     * Тестовые данные.
     *
     * @return array
     */
    private function fakerInputData(): array
    {
        $i = $this->faker->numberBetween(1, 4);
        $emails = [];
        $phones = [];

        do {
            $emails[] = $this->faker->email;
            $phones[] = $this->faker->numberBetween(1000000, 9999999999999999);
            $i--;
        } while ($i > 0);

        return [
            'first_name' => "{$this->faker->firstName}_test",
            'last_name' => "{$this->faker->lastName}_test",
            'emails' => $emails,
            'phones' => $phones,
        ];
    }
}
